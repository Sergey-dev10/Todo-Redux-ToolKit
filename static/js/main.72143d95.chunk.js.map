{"version":3,"sources":["components/Title/Title.js","components/TaskAddition/TaskAddition.styles.js","reducers/todoSlice.js","components/TaskAddition/TaskAddition.js","common/devices.js","components/TaskList/TaskList.styles.js","components/Task/Task.styles.js","components/Task/Task.js","reducers/filterSlice.js","components/TasksFilter/TasksFilter.styles.js","components/TasksFilter/TasksFilter.js","components/TaskSearch/TaskSearch.styles.js","reducers/searchSlice.js","components/TaskSearch/TaskSearch.js","components/TaskList/TaskList.js","App.js","reducers/index.js","store/store.js","index.js"],"names":["Title","TaskAdditionWrapper","styled","form","InputSubmit","input","InputAddField","todoSlice","createSlice","name","initialState","todo","reducers","addTask","state","action","push","payload","compliteTask","map","task","id","isComplited","removeTask","filter","actions","selectTodo","TaskAddition","dispatch","useDispatch","useSelector","useState","inPutValue","setInputValue","onSubmit","event","preventDefault","nanoid","text","type","placeholder","value","onChange","target","size","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","TaskListWrapper","div","SearchFilterWrapper","ButtonComplite","button","ButtonRemove","ButtonsWrapper","TaskWrapper","TextWrapper","p","complition","Task","onClick","filterSlice","filterType","showAll","showActive","showADone","ButtonDone","pressed","ButtonActive","ButtonAll","TaskFilterWrapper","TasksFilter","tasks","isAllBtn","isActiveBtn","isDoneBtn","activeBtn","InputSearch","searchSlice","searchTask","TaskSearch","despatch","InputValue","trim","TaskList","currentFilter","searchedText","search","includes","App","className","rootReducer","combineReducers","todoReducer","filterReducer","searchReducer","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72143d95.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Title = () => <h1>Todo List</h1>;\n","import styled from 'styled-components';\n\nexport const TaskAdditionWrapper = styled.form`\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 15px;\n`;\n\nexport const InputSubmit = styled.input`\n    height: 29px;\n    border: 1px solid #000000; \n    border-radius: 3px;\n    background-color: #FFFFFF;\n`;\n\nexport const InputAddField = styled.input`\n    width: 75%;\n    height: 29px;\n    padding-left: 5px;\n    box-sizing: border-box;\n    border: 1px solid #000000;\n    border-radius: 3px;\n`;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  todo: [],\n};\n\nconst todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    addTask(state, action) {\n      state.todo.push(action.payload);\n    },\n    compliteTask(state, action) {\n      const id = action.payload;\n      state.todo = state.todo.map((task) => (task.id === action.payload\n        ? { ...task, isComplited: !task.isComplited } : task));\n    },\n    removeTask(state, action) {\n      const id = action.payload;\n      state.todo = state.todo.filter((task) => task.id !== id);\n    },\n  },\n});\n\nexport const { addTask, compliteTask, removeTask } = todoSlice.actions;\nexport const selectTodo = ({ todo }) => todo.todo;\nexport default todoSlice.reducer;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { TaskAdditionWrapper, InputAddField, InputSubmit } from './TaskAddition.styles';\nimport { addTask } from '../../reducers/todoSlice';\n\nexport const TaskAddition = () => {\n  const dispatch = useDispatch();\n  const tasks = useSelector(({ todo }) => todo);\n  const [inPutValue, setInputValue] = useState('');\n  const onChangeInput = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n  const onAddTask = (event) => {\n    event.preventDefault();\n    if (inPutValue) {\n      dispatch(addTask({\n        id: nanoid(),\n        isComplited: false,\n        text: inPutValue,\n      }));\n      setInputValue('');\n    }\n  };\n\n  return (\n    <TaskAdditionWrapper onSubmit={onAddTask}>\n      <InputAddField\n        type=\"text\"\n        placeholder=\"What needs to be done\"\n        value={inPutValue}\n        onChange={onChangeInput}\n      />\n      <InputSubmit type=\"submit\" value=\"Add task\" />\n    </TaskAdditionWrapper>\n  );\n};\n","const size = {\n  mobileS: '320px',\n  mobileM: '375px',\n  mobileL: '425px',\n  tablet: '768px',\n  laptop: '1024px',\n  laptopL: '1440px',\n  desktop: '2560px',\n};\n\nexport const device = {\n  mobileS: `(min-width: ${size.mobileS})`,\n  mobileM: `(min-width: ${size.mobileM})`,\n  mobileL: `(min-width: ${size.mobileL})`,\n  tablet: `(min-width: ${size.tablet})`,\n  laptop: `(min-width: ${size.laptop})`,\n  laptopL: `(min-width: ${size.laptopL})`,\n  desktop: `(min-width: ${size.desktop})`,\n  desktopL: `(min-width: ${size.desktop})`,\n};\n","import styled from 'styled-components';\nimport { device } from '../../common/devices';\n\nexport const TaskListWrapper = styled.div`\n    width: 28%;\n    min-height: 200px;\n    margin: 10% auto;\n\n    @media ${device.mobileS} { \n        width: 100%;\n    }\n    @media ${device.tablet} { \n        width: 55%;\n    }\n    @media ${device.laptop} { \n        width: 42%;\n    }\n    @media ${device.laptopL} { \n        width: 30%;\n    }\n    @media ${device.desktopL} { \n        width: 25%;\n    }\n`;\n\nexport const SearchFilterWrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    margin-top: 10px;\n`;\n","import styled from 'styled-components';\nimport { device } from '../../common/devices';\n\nexport const ButtonComplite = styled.button`\n    height: 29px;\n    border: 1px solid #47A76A; \n    border-radius: 3px;\n    background-color: #FFFFFF;\n`;\n\nexport const ButtonRemove = styled(ButtonComplite)`\n    border: 1px solid #A12312;\n`;\n\nexport const ButtonsWrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    width: 30%;\n\n    @media ${device.mobileS} { \n        width: 45%;\n    }\n    @media ${device.mobileM} { \n        width: 38%;\n    }\n    @media ${device.mobileL} { \n        width: 33%;\n    }\n    @media ${device.laptop} { \n        width: 30%;\n    }\n    @media ${device.desktop} { \n        width: 25%;\n    }\n    @media ${device.desktopL} { \n        width: 20%;\n    }\n`;\n\nexport const TaskWrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: baseline;\n    border-bottom: 1px solid #000000;\n`;\n\nexport const TextWrapper = styled.p`\n    width: 50%;  \n    text-decoration: ${({ complition }) => (complition ? 'line-through' : 'none')};\n    word-wrap: break-word;\n`;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { compliteTask, removeTask } from '../../reducers/todoSlice';\nimport {\n  TaskWrapper,\n  TextWrapper,\n  ButtonsWrapper,\n  ButtonComplite,\n  ButtonRemove,\n} from './Task.styles';\n\nexport const Task = ({\n  id, isComplited, text,\n}) => {\n  const dispatch = useDispatch();\n  const onComplite = () => {\n    dispatch(compliteTask(id));\n  };\n  const onRemove = () => {\n    dispatch(removeTask(id));\n  };\n\n  return (\n    <TaskWrapper>\n      <TextWrapper complition={isComplited}>{text}</TextWrapper>\n      <ButtonsWrapper>\n        <ButtonComplite\n          type=\"button\"\n          onClick={onComplite}\n        >\n          Complite\n        </ButtonComplite>\n        <ButtonRemove\n          type=\"button\"\n          onClick={onRemove}\n        >\n          Remove\n        </ButtonRemove>\n      </ButtonsWrapper>\n    </TaskWrapper>\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  filterType: 'SHOW_ALL',\n};\n\nconst filterSlice = createSlice({\n  name: 'filter',\n  initialState,\n  reducers: {\n    showAll(state) {\n      state.filterType = 'SHOW_ALL';\n    },\n    showActive(state) {\n      state.filterType = 'SHOW_ACTIVE';\n    },\n    showADone(state) {\n      state.filterType = 'SHOW_DONE';\n    },\n  },\n});\n\nexport const { showAll, showActive, showADone } = filterSlice.actions;\nexport const selectTypeFilter = ({ filter }) => filter.filterType;\nexport default filterSlice.reducer;\n","import styled from 'styled-components';\nimport { device } from '../../common/devices';\n\nexport const ButtonDone = styled.button`\n    width: 33.3%;\n    height: 100%;    \n    border: none;\n    background-color: ${({ pressed }) => (pressed ? '#185AFF' : '#FFFFFF')};\n`;\n\nexport const ButtonActive = styled(ButtonDone)`\n    border-right: 1px solid #000000;\n`;\n\nexport const ButtonAll = styled(ButtonDone)`\n    border-right: 1px solid #000000;   \n`;\n\nexport const TaskFilterWrapper = styled.div`\n    width: 32%;\n    height: 29;\n    border: 1px solid #000000; \n    border-radius: 3px;\n    background-color: #FFFFFF;\n\n    @media ${device.mobileS} { \n        width: 45%;\n    }\n    @media ${device.mobileL} { \n        width: 33%;\n    }\n`;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { showAll, showActive, showADone } from '../../reducers/filterSlice';\nimport {\n  TaskFilterWrapper, ButtonAll, ButtonActive, ButtonDone,\n} from './TasksFilter.styles';\n\nexport const TasksFilter = ({ tasks }) => {\n  let isAllBtn; let isActiveBtn; let\n    isDoneBtn = false;\n  const activeBtn = useSelector(({ filterType }) => filterType.filterType);\n\n  if (activeBtn === 'SHOW_ALL') {\n    isAllBtn = true;\n  } else if (activeBtn === 'SHOW_ACTIVE') {\n    isActiveBtn = true;\n  } else if (activeBtn === 'SHOW_DONE') {\n    isDoneBtn = true;\n  }\n\n  const dispatch = useDispatch();\n  const onShowAll = () => {\n    dispatch(showAll());\n  };\n  const onShowActive = () => {\n    dispatch(showActive());\n  };\n  const onShowDone = () => {\n    dispatch(showADone());\n  };\n  return (\n    <TaskFilterWrapper>\n      <ButtonAll pressed={isAllBtn} onClick={onShowAll}>All</ButtonAll>\n      <ButtonActive pressed={isActiveBtn} onClick={onShowActive}>Active</ButtonActive>\n      <ButtonDone pressed={isDoneBtn} onClick={onShowDone}>Done</ButtonDone>\n    </TaskFilterWrapper>\n  );\n};\n","import styled from 'styled-components';\nimport { device } from '../../common/devices';\n\nexport const InputSearch = styled.input`\n    width: 60%;\n    height: 25px;\n    padding-left: 5px;\n    border: 1px solid #000000;\n    border-radius: 3px;\n\n    @media ${device.mobileS} { \n        width: 50%;\n    }\n    @media ${device.mobileL} { \n        width: 60%;\n    }\n`;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport todoSlice from './todoSlice';\n\nconst initialState = {\n  text: '',\n};\n\nconst searchSlice = createSlice({\n  name: 'search',\n  initialState,\n  reducers: {\n    searchTask(state, action) {\n      state.text = action.payload;\n    },\n  },\n});\n\nexport const { searchTask } = searchSlice.actions;\nexport const selectSerchedText = ({ search }) => search.text;\nexport default searchSlice.reducer;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { InputSearch } from './TaskSearch.styles';\nimport { searchTask } from '../../reducers/searchSlice';\n\nexport const TaskSearch = () => {\n  const despatch = useDispatch();\n  const [InputValue, setInputValue] = useState('');\n  const onChangeInput = (event) => {\n    const text = event.target.value.trim();\n    setInputValue(text);\n    despatch(searchTask(text));\n  };\n  return (\n    <InputSearch type=\"text\" placeholder=\"type to search\" value={InputValue} onChange={onChangeInput} />\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Title } from '../Title';\nimport { TaskAddition } from '../TaskAddition';\nimport { TaskListWrapper, SearchFilterWrapper } from './TaskList.styles';\nimport { Task } from '../Task';\nimport { TasksFilter } from '../TasksFilter';\nimport { TaskSearch } from '../TaskSearch';\nimport { selectTodo } from '../../reducers/todoSlice';\n\nexport const TaskList = () => {\n  let tasks = useSelector(selectTodo);\n  const currentFilter = useSelector(({ filterType }) => filterType.filterType);\n  const searchedText = useSelector(({ search }) => search.text);\n\n  if (currentFilter === 'SHOW_ACTIVE') {\n    tasks = tasks.filter((task) => task.isComplited === false);\n  } else if (currentFilter === 'SHOW_DONE') {\n    tasks = tasks.filter((task) => task.isComplited === true);\n  }\n  if (searchedText) {\n    tasks = tasks.filter((task) => task.text.includes(searchedText));\n  }\n\n  return (\n    <TaskListWrapper>\n      <Title />\n      <TaskAddition />\n      {tasks.map((task) => (\n        <Task\n          key={task.id}\n          id={task.id}\n          isComplited={task.isComplited}\n          text={task.text}\n        />\n      ))}\n      <SearchFilterWrapper>\n        <TaskSearch />\n        <TasksFilter tasks={tasks} />\n      </SearchFilterWrapper>\n    </TaskListWrapper>\n  );\n};\n","import React from 'react';\nimport { TaskList } from './components/TaskList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TaskList />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport todoReducer from './todoSlice';\nimport filterReducer from './filterSlice';\nimport searchReducer from './searchSlice';\n\nexport const rootReducer = combineReducers({\n  todo: todoReducer,\n  filterType: filterReducer,\n  search: searchReducer,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport { rootReducer } from '../reducers';\n\nexport const store = configureStore({\n  reducer: rootReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}